// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.42000
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code

using TechTalk.SpecFlow;

#pragma warning disable
namespace Affecto.IdentityManagement.AcceptanceTests.Features
{
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class ExternalUsersFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "ExternalUsers.feature"
#line hidden
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "ExternalUsers", "", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((TechTalk.SpecFlow.FeatureContext.Current != null) 
                        && (TechTalk.SpecFlow.FeatureContext.Current.FeatureInfo.Title != "ExternalUsers")))
            {
                ExternalUsersFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 3
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "User name",
                        "Display name",
                        "Account name",
                        "Account type"});
            table1.AddRow(new string[] {
                        "Hank",
                        "Hank Jennings",
                        "hank@domain",
                        "Active directory"});
#line 5
    testRunner.Given("there are following external users:", ((string)(null)), table1, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Group"});
            table2.AddRow(new string[] {
                        "group1"});
            table2.AddRow(new string[] {
                        "group2"});
            table2.AddRow(new string[] {
                        "group3"});
            table2.AddRow(new string[] {
                        "group4"});
#line 9
    testRunner.And("external user \'Hank\' is member of following groups:", ((string)(null)), table2, "And ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "External group"});
            table3.AddRow(new string[] {
                        "g1",
                        "group1"});
            table3.AddRow(new string[] {
                        "g2",
                        "group2"});
            table3.AddRow(new string[] {
                        "g3",
                        ""});
            table3.AddRow(new string[] {
                        "g4",
                        "group4"});
#line 16
    testRunner.And("there are following groups in the identity management service:", ((string)(null)), table3, "And ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "External group"});
            table4.AddRow(new string[] {
                        "r1",
                        ""});
            table4.AddRow(new string[] {
                        "r2",
                        "group2"});
            table4.AddRow(new string[] {
                        "r3",
                        "group3"});
            table4.AddRow(new string[] {
                        "r4",
                        "group4"});
#line 23
    testRunner.And("there are following roles in the identity management service:", ((string)(null)), table4, "And ");
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("External user is found by account name")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ExternalUsers")]
        public virtual void ExternalUserIsFoundByAccountName()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("External user is found by account name", ((string[])(null)));
#line 30
this.ScenarioSetup(scenarioInfo);
#line 3
this.FeatureBackground();
#line 31
    testRunner.Given("a new external user \'Hank\' is added", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 32
    testRunner.When("account of external user \'Hank\' in identity management service is found", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 33
    testRunner.Then("user information can be retrieved by account name of external user \'Hank\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("External user is not found by account name")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ExternalUsers")]
        public virtual void ExternalUserIsNotFoundByAccountName()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("External user is not found by account name", ((string[])(null)));
#line 35
this.ScenarioSetup(scenarioInfo);
#line 3
this.FeatureBackground();
#line 36
    testRunner.When("account of external user \'Hank\' in identity management service is not found", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 37
    testRunner.And("retrieving user information by account name of external user \'Hank\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 38
    testRunner.Then("retrieving user information failed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Add new external user with groups and roles")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ExternalUsers")]
        public virtual void AddNewExternalUserWithGroupsAndRoles()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Add new external user with groups and roles", ((string[])(null)));
#line 40
this.ScenarioSetup(scenarioInfo);
#line 3
this.FeatureBackground();
#line 41
    testRunner.When("a new external user \'Hank\' is added", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table5.AddRow(new string[] {
                        "Hank Jennings"});
#line 42
    testRunner.Then("the following users exist:", ((string)(null)), table5, "Then ");
#line 45
    testRunner.And("user \'Hank Jennings\' has an active directory account with name \'hank@domain\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Role"});
            table6.AddRow(new string[] {
                        "r2"});
            table6.AddRow(new string[] {
                        "r3"});
            table6.AddRow(new string[] {
                        "r4"});
#line 46
    testRunner.And("the user \'Hank Jennings\' has the following roles:", ((string)(null)), table6, "And ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "Group"});
            table7.AddRow(new string[] {
                        "g1"});
            table7.AddRow(new string[] {
                        "g2"});
            table7.AddRow(new string[] {
                        "g4"});
#line 51
    testRunner.And("the user \'Hank Jennings\' has is a member of the following groups:", ((string)(null)), table7, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Update groups and roles of existing external user")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ExternalUsers")]
        public virtual void UpdateGroupsAndRolesOfExistingExternalUser()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Update groups and roles of existing external user", ((string[])(null)));
#line 57
this.ScenarioSetup(scenarioInfo);
#line 3
this.FeatureBackground();
#line 58
    testRunner.Given("a new external user \'Hank\' is added", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 59
    testRunner.And("the external group name of the group \'g3\' is changed to \'group4\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 60
    testRunner.And("the external group name of the group \'g4\' is changed to \'group5\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 61
    testRunner.And("the external group name of the group \'g2\' is cleared", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 62
    testRunner.And("the external group name of the role \'r1\' is changed to \'group4\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 63
    testRunner.And("the external group name of the role \'r2\' is changed to \'group5\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 64
    testRunner.And("the external group name of the role \'r3\' is cleared", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 65
    testRunner.When("information of external user \'Hank\' is updated", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table8.AddRow(new string[] {
                        "Hank Jennings"});
#line 66
    testRunner.Then("the following users exist:", ((string)(null)), table8, "Then ");
#line 69
    testRunner.And("user \'Hank Jennings\' has an active directory account with name \'hank@domain\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "Role"});
            table9.AddRow(new string[] {
                        "r1"});
            table9.AddRow(new string[] {
                        "r3"});
            table9.AddRow(new string[] {
                        "r4"});
#line 70
    testRunner.And("the user \'Hank Jennings\' has the following roles:", ((string)(null)), table9, "And ");
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "Group"});
            table10.AddRow(new string[] {
                        "g1"});
            table10.AddRow(new string[] {
                        "g2"});
            table10.AddRow(new string[] {
                        "g3"});
#line 75
    testRunner.And("the user \'Hank Jennings\' has is a member of the following groups:", ((string)(null)), table10, "And ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
