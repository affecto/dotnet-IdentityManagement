// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.42000
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Affecto.IdentityManagement.AcceptanceTests.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class UsersFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "Users.feature"
#line hidden
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Users", "", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((TechTalk.SpecFlow.FeatureContext.Current != null) 
                        && (TechTalk.SpecFlow.FeatureContext.Current.FeatureInfo.Title != "Users")))
            {
                Affecto.IdentityManagement.AcceptanceTests.Features.UsersFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Users cannot be added without a permission")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Users")]
        public virtual void UsersCannotBeAddedWithoutAPermission()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Users cannot be added without a permission", ((string[])(null)));
#line 3
this.ScenarioSetup(scenarioInfo);
#line 4
    testRunner.Given("the user has no permission to maintain user data", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 5
    testRunner.When("a user \'Hank Jennings\' is added", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 6
    testRunner.Then("adding the user fails because of invalid permissions", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Adding users")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Users")]
        public virtual void AddingUsers()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Adding users", ((string[])(null)));
#line 8
this.ScenarioSetup(scenarioInfo);
#line 9
    testRunner.When("a user \'Hank Jennings\' is added", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 10
    testRunner.And("a user \'Norma Jennings\' is added", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table1.AddRow(new string[] {
                        "Hank Jennings"});
            table1.AddRow(new string[] {
                        "Norma Jennings"});
#line 11
    testRunner.Then("the following users exist:", ((string)(null)), table1, "Then ");
#line 15
    testRunner.And("all users are enabled", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Adding users with custom properties")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Users")]
        public virtual void AddingUsersWithCustomProperties()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Adding users with custom properties", ((string[])(null)));
#line 17
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Value"});
            table2.AddRow(new string[] {
                        "EmailAddress",
                        "hank@jennings.net"});
            table2.AddRow(new string[] {
                        "OrganizationId",
                        "DB42B633-DE5C-4414-A20F-D57AAED283C1"});
            table2.AddRow(new string[] {
                        "StreetAddress",
                        ""});
#line 18
    testRunner.When("a user \'Hank Jennings\' is added with the following custom properties:", ((string)(null)), table2, "When ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table3.AddRow(new string[] {
                        "Hank Jennings"});
#line 23
    testRunner.Then("the following users exist:", ((string)(null)), table3, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Value"});
            table4.AddRow(new string[] {
                        "EmailAddress",
                        "hank@jennings.net"});
            table4.AddRow(new string[] {
                        "OrganizationId",
                        "DB42B633-DE5C-4414-A20F-D57AAED283C1"});
            table4.AddRow(new string[] {
                        "StreetAddress",
                        ""});
#line 26
    testRunner.And("the user \'Hank Jennings\' has the following custom properties:", ((string)(null)), table4, "And ");
#line 31
    testRunner.And("all users are enabled", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Adding a user with no name is not possible")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Users")]
        public virtual void AddingAUserWithNoNameIsNotPossible()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Adding a user with no name is not possible", ((string[])(null)));
#line 33
this.ScenarioSetup(scenarioInfo);
#line 34
    testRunner.When("a user with no name is added", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 35
    testRunner.Then("adding the user fails", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Disabling a user cannot be done without a permission")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Users")]
        public virtual void DisablingAUserCannotBeDoneWithoutAPermission()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Disabling a user cannot be done without a permission", ((string[])(null)));
#line 37
this.ScenarioSetup(scenarioInfo);
#line 38
    testRunner.Given("a user \'Hank Jennings\' is added", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 39
    testRunner.When("the user has no permission to maintain user data", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 40
    testRunner.And("the user \'Hank Jennings\' is disabled", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 41
    testRunner.Then("updating the user fails because of invalid permissions", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Disabling a user")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Users")]
        public virtual void DisablingAUser()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Disabling a user", ((string[])(null)));
#line 43
this.ScenarioSetup(scenarioInfo);
#line 44
    testRunner.Given("a user \'Hank Jennings\' is added", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 45
    testRunner.When("the user \'Hank Jennings\' is disabled", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 46
    testRunner.Then("the user \'Hank Jennings\' is disabled", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Changing user\'s name cannot be done without a permission")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Users")]
        public virtual void ChangingUserSNameCannotBeDoneWithoutAPermission()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Changing user\'s name cannot be done without a permission", ((string[])(null)));
#line 48
this.ScenarioSetup(scenarioInfo);
#line 49
    testRunner.Given("a user \'Hank Jennings\' is added", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 50
    testRunner.When("the user has no permission to maintain user data", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 51
    testRunner.And("the name of the user \'Hank Jennings\' is changed to \'Mike Modano\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 52
    testRunner.Then("updating the user fails because of invalid permissions", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Changing user\'s name")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Users")]
        public virtual void ChangingUserSName()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Changing user\'s name", ((string[])(null)));
#line 54
this.ScenarioSetup(scenarioInfo);
#line 55
    testRunner.Given("a user \'Hank Jennings\' is added", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 56
    testRunner.When("the name of the user \'Hank Jennings\' is changed to \'Mike Modano\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table5.AddRow(new string[] {
                        "Mike Modano"});
#line 57
    testRunner.Then("the following users exist:", ((string)(null)), table5, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Clearing the name of a user is not possible")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Users")]
        public virtual void ClearingTheNameOfAUserIsNotPossible()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Clearing the name of a user is not possible", ((string[])(null)));
#line 61
this.ScenarioSetup(scenarioInfo);
#line 62
    testRunner.Given("a user \'Hank Jennings\' is added", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 63
    testRunner.When("the name of the user \'Hank Jennings\' is cleared", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 64
    testRunner.Then("updating the user fails", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Adding a user role cannot be done without a permission")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Users")]
        public virtual void AddingAUserRoleCannotBeDoneWithoutAPermission()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Adding a user role cannot be done without a permission", ((string[])(null)));
#line 66
this.ScenarioSetup(scenarioInfo);
#line 67
    testRunner.Given("a role \'Tree modifiers\' exists", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 68
    testRunner.And("a user \'Hank Jennings\' is added", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 69
    testRunner.When("the user has no permission to maintain user data", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 70
    testRunner.And("the user \'Hank Jennings\' is given the role \'Tree modifiers\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 71
    testRunner.Then("adding the role fails because of invalid permissions", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Adding a user role")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Users")]
        public virtual void AddingAUserRole()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Adding a user role", ((string[])(null)));
#line 73
this.ScenarioSetup(scenarioInfo);
#line 74
    testRunner.Given("a role \'Tree modifiers\' exists", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 75
    testRunner.And("a user \'Hank Jennings\' is added", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 76
    testRunner.When("the user \'Hank Jennings\' is given the role \'Tree modifiers\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Role"});
            table6.AddRow(new string[] {
                        "Tree modifiers"});
#line 77
    testRunner.Then("the user \'Hank Jennings\' has the following roles:", ((string)(null)), table6, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Removing a user role cannot be done without a permission")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Users")]
        public virtual void RemovingAUserRoleCannotBeDoneWithoutAPermission()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Removing a user role cannot be done without a permission", ((string[])(null)));
#line 81
this.ScenarioSetup(scenarioInfo);
#line 82
    testRunner.Given("a role \'Tree modifiers\' exists", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 83
    testRunner.And("a user \'Hank Jennings\' is added", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 84
    testRunner.And("the user \'Hank Jennings\' is given the role \'Tree modifiers\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 85
    testRunner.When("the user has no permission to maintain user data", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 86
    testRunner.And("the user \'Hank Jennings\' is removed from the role \'Tree modifiers\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 87
    testRunner.Then("removing the role fails because of invalid permissions", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Removing a user role")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Users")]
        public virtual void RemovingAUserRole()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Removing a user role", ((string[])(null)));
#line 89
this.ScenarioSetup(scenarioInfo);
#line 90
    testRunner.Given("a role \'Tree modifiers\' exists", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 91
    testRunner.And("a user \'Hank Jennings\' is added", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 92
    testRunner.And("the user \'Hank Jennings\' is given the role \'Tree modifiers\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 93
    testRunner.When("the user \'Hank Jennings\' is removed from the role \'Tree modifiers\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 94
    testRunner.Then("the user \'Hank Jennings\' has no roles", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Adding a user organization cannot be done without a permission")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Users")]
        public virtual void AddingAUserOrganizationCannotBeDoneWithoutAPermission()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Adding a user organization cannot be done without a permission", ((string[])(null)));
#line 96
this.ScenarioSetup(scenarioInfo);
#line 97
    testRunner.Given("an organization \'R&D\' exists", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 98
    testRunner.And("a user \'Hank Jennings\' is added", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 99
    testRunner.When("the user has no permission to maintain user data", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 100
    testRunner.And("the user \'Hank Jennings\' is added to the organization \'R&D\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 101
    testRunner.Then("adding the organization fails because of invalid permissions", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Adding a user organization")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Users")]
        public virtual void AddingAUserOrganization()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Adding a user organization", ((string[])(null)));
#line 103
this.ScenarioSetup(scenarioInfo);
#line 104
    testRunner.Given("an organization \'R&D\' exists", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 105
    testRunner.And("an organization \'All\' exists", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 106
    testRunner.And("a user \'Hank Jennings\' is added", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 108
    testRunner.When("the user \'Hank Jennings\' is added to the organization \'All\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "Organization"});
            table7.AddRow(new string[] {
                        "All"});
#line 109
    testRunner.Then("the user \'Hank Jennings\' is in the following organizations:", ((string)(null)), table7, "Then ");
#line 113
    testRunner.When("the user \'Hank Jennings\' is added to the organization \'R&D\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "Organization"});
            table8.AddRow(new string[] {
                        "All"});
            table8.AddRow(new string[] {
                        "R&D"});
#line 114
    testRunner.Then("the user \'Hank Jennings\' is in the following organizations:", ((string)(null)), table8, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Adding a disabled user organization fails")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Users")]
        public virtual void AddingADisabledUserOrganizationFails()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Adding a disabled user organization fails", ((string[])(null)));
#line 119
this.ScenarioSetup(scenarioInfo);
#line 120
    testRunner.Given("an disabled organization \'R&D\' exists", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 121
    testRunner.And("a user \'Hank Jennings\' is added", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 122
    testRunner.When("the user \'Hank Jennings\' is added to the organization \'R&D\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 123
    testRunner.Then("adding the organization fails", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Removing a user organization cannot be done without a permission")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Users")]
        public virtual void RemovingAUserOrganizationCannotBeDoneWithoutAPermission()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Removing a user organization cannot be done without a permission", ((string[])(null)));
#line 125
this.ScenarioSetup(scenarioInfo);
#line 126
    testRunner.Given("an organization \'R&D\' exists", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 127
    testRunner.And("a user \'Hank Jennings\' is added", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 128
    testRunner.And("the user \'Hank Jennings\' is added to the organization \'R&D\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 129
    testRunner.When("the user has no permission to maintain user data", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 130
    testRunner.And("the user \'Hank Jennings\' is removed from the organization \'R&D\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 131
    testRunner.Then("removing the organization fails because of invalid permissions", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Removing a user organization")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Users")]
        public virtual void RemovingAUserOrganization()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Removing a user organization", ((string[])(null)));
#line 133
this.ScenarioSetup(scenarioInfo);
#line 134
    testRunner.Given("an organization \'R&D\' exists", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 135
    testRunner.And("a user \'Hank Jennings\' is added", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 136
    testRunner.And("the user \'Hank Jennings\' is added to the organization \'R&D\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 137
    testRunner.When("the user \'Hank Jennings\' is removed from the organization \'R&D\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 138
    testRunner.Then("the user \'Hank Jennings\' is in no organization", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Adding account to user")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Users")]
        public virtual void AddingAccountToUser()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Adding account to user", ((string[])(null)));
#line 140
this.ScenarioSetup(scenarioInfo);
#line 141
    testRunner.Given("a user \'Hank Jennings\' is added", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 142
    testRunner.When("an active directory account with name \'hank@domain\' is added for user \'Hank Jenni" +
                    "ngs\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 143
    testRunner.Then("user \'Hank Jennings\' has an active directory account with name \'hank@domain\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Adding a password account to user")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Users")]
        public virtual void AddingAPasswordAccountToUser()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Adding a password account to user", ((string[])(null)));
#line 145
this.ScenarioSetup(scenarioInfo);
#line 146
    testRunner.Given("a user \'Hank Jennings\' is added", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 147
    testRunner.When("an account with name \'hank@domain\' and password \'VerySecret\' is added for user \'H" +
                    "ank Jennings\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 148
    testRunner.Then("user \'Hank Jennings\' has an account with name \'hank@domain\' and password \'VerySec" +
                    "ret\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Adding a password account without password to user")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Users")]
        public virtual void AddingAPasswordAccountWithoutPasswordToUser()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Adding a password account without password to user", ((string[])(null)));
#line 150
this.ScenarioSetup(scenarioInfo);
#line 151
    testRunner.Given("a user \'Hank Jennings\' is added", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 152
    testRunner.When("a password account with name \'hank@domain\' without password is added for user \'Ha" +
                    "nk Jennings\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 153
    testRunner.Then("adding new account fails because wrong account type is specified", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Checking for user\'s matching password")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Users")]
        public virtual void CheckingForUserSMatchingPassword()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Checking for user\'s matching password", ((string[])(null)));
#line 155
this.ScenarioSetup(scenarioInfo);
#line 156
    testRunner.Given("a user \'Hank Jennings\' is added", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 157
    testRunner.And("an account with name \'hank@domain\' and password \'VerySecret\' is added for user \'H" +
                    "ank Jennings\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 158
    testRunner.Then("password \'VerySecret\' matches to the password of user account \'hank@domain\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Checking for user\'s non-matching password")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Users")]
        public virtual void CheckingForUserSNon_MatchingPassword()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Checking for user\'s non-matching password", ((string[])(null)));
#line 160
this.ScenarioSetup(scenarioInfo);
#line 161
    testRunner.Given("a user \'Hank Jennings\' is added", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 162
    testRunner.And("an account with name \'hank@domain\' and password \'VerySecret\' is added for user \'H" +
                    "ank Jennings\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 163
    testRunner.Then("password \'ThisIsWrong!\' does not match to the password of user account \'hank@doma" +
                    "in\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Checking for user\'s non-matching case sensitive password")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Users")]
        public virtual void CheckingForUserSNon_MatchingCaseSensitivePassword()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Checking for user\'s non-matching case sensitive password", ((string[])(null)));
#line 165
this.ScenarioSetup(scenarioInfo);
#line 166
    testRunner.Given("a user \'Hank Jennings\' is added", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 167
    testRunner.And("an account with name \'hank@domain\' and password \'VerySecret\' is added for user \'H" +
                    "ank Jennings\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 168
    testRunner.Then("password \'verysecret\' does not match to the password of user account \'hank@domain" +
                    "\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Checking for matching password of non-existing user")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Users")]
        public virtual void CheckingForMatchingPasswordOfNon_ExistingUser()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Checking for matching password of non-existing user", ((string[])(null)));
#line 170
this.ScenarioSetup(scenarioInfo);
#line 171
    testRunner.Given("a user \'Hank Jennings\' is added", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 172
    testRunner.And("an account with name \'hank@domain\' and password \'VerySecret\' is added for user \'H" +
                    "ank Jennings\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 173
    testRunner.Then("password \'VerySecret!\' does not match to the password of user account \'otherUser@" +
                    "domain\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Updating user\'s account information")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Users")]
        public virtual void UpdatingUserSAccountInformation()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Updating user\'s account information", ((string[])(null)));
#line 175
this.ScenarioSetup(scenarioInfo);
#line 176
    testRunner.Given("a user \'Hank Jennings\' is added", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 177
    testRunner.And("an active directory account with name \'hank@domain\' is added for user \'Hank Jenni" +
                    "ngs\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 178
    testRunner.When("active directory account name is changed to \'jennings@domain\' for user \'Hank Jenn" +
                    "ings\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 179
    testRunner.Then("user \'Hank Jennings\' has an active directory account with name \'jennings@domain\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Adding empty account")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Users")]
        public virtual void AddingEmptyAccount()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Adding empty account", ((string[])(null)));
#line 181
this.ScenarioSetup(scenarioInfo);
#line 182
    testRunner.Given("a user \'Hank Jennings\' is added", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 183
    testRunner.When("an active directory account without name is added for user \'Hank Jennings\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 184
    testRunner.Then("adding new account fails because of account\'s name is not specified", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Updating account with empty name")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Users")]
        public virtual void UpdatingAccountWithEmptyName()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Updating account with empty name", ((string[])(null)));
#line 186
this.ScenarioSetup(scenarioInfo);
#line 187
    testRunner.Given("a user \'Hank Jennings\' is added", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 188
    testRunner.And("an active directory account with name \'hank@domain\' is added for user \'Hank Jenni" +
                    "ngs\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 189
    testRunner.When("active directory account name is cleared for user \'Hank Jennings\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 190
    testRunner.Then("updating account fails because of account\'s name is not specified", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Adding account that is already assigned to another user")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Users")]
        public virtual void AddingAccountThatIsAlreadyAssignedToAnotherUser()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Adding account that is already assigned to another user", ((string[])(null)));
#line 192
this.ScenarioSetup(scenarioInfo);
#line 193
    testRunner.Given("a user \'Hank Jennings\' is added", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 194
    testRunner.And("a user \'Norma Jennings\' is added", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 195
    testRunner.And("an active directory account with name \'jennings@domain\' is added for user \'Hank J" +
                    "ennings\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 196
    testRunner.When("an active directory account with name \'jennings@domain\' is added for user \'Norma " +
                    "Jennings\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 197
    testRunner.Then("adding new account fails because account is already assigned", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Updating account that is already assigned to another user")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Users")]
        public virtual void UpdatingAccountThatIsAlreadyAssignedToAnotherUser()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Updating account that is already assigned to another user", ((string[])(null)));
#line 199
this.ScenarioSetup(scenarioInfo);
#line 200
    testRunner.Given("a user \'Hank Jennings\' is added", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 201
    testRunner.And("a user \'Norma Jennings\' is added", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 202
    testRunner.And("an active directory account with name \'jennings@domain\' is added for user \'Hank J" +
                    "ennings\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 203
    testRunner.And("an active directory account with name \'norma@domain\' is added for user \'Norma Jen" +
                    "nings\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 204
    testRunner.When("active directory account name is changed to \'jennings@domain\' for user \'Norma Jen" +
                    "nings\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 205
    testRunner.Then("adding new account fails because account is already assigned", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Adding multiple accounts for user")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Users")]
        public virtual void AddingMultipleAccountsForUser()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Adding multiple accounts for user", ((string[])(null)));
#line 207
this.ScenarioSetup(scenarioInfo);
#line 208
    testRunner.Given("a user \'Hank Jennings\' is added", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 209
    testRunner.When("an active directory account with name \'hank@domain\' is added for user \'Hank Jenni" +
                    "ngs\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 210
    testRunner.And("a federated account with name \'hank\' is added for user \'Hank Jennings\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 211
    testRunner.Then("user \'Hank Jennings\' has an active directory account with name \'hank@domain\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 212
    testRunner.And("user \'Hank Jennings\' has a federated account with name \'hank\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Removing an account from user")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Users")]
        public virtual void RemovingAnAccountFromUser()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Removing an account from user", ((string[])(null)));
#line 214
this.ScenarioSetup(scenarioInfo);
#line 215
    testRunner.Given("a user \'Hank Jennings\' is added", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 216
    testRunner.And("an active directory account with name \'hank@domain\' is added for user \'Hank Jenni" +
                    "ngs\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 217
    testRunner.When("removing active directory account from user \'Hank Jennings\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 218
    testRunner.Then("user \'Hank Jennings\' has no assigned active directory account", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Getting users by custom property value")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Users")]
        public virtual void GettingUsersByCustomPropertyValue()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Getting users by custom property value", ((string[])(null)));
#line 220
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Value"});
            table9.AddRow(new string[] {
                        "EmailAddress",
                        "hank@jennings.net"});
            table9.AddRow(new string[] {
                        "OrganizationId",
                        "DB42B633-DE5C-4414-A20F-D57AAED283C1"});
            table9.AddRow(new string[] {
                        "StreetAddress",
                        "Street 123"});
#line 221
    testRunner.Given("a user \'Hank Jennings\' is added with the following custom properties:", ((string)(null)), table9, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Value"});
            table10.AddRow(new string[] {
                        "EmailAddress",
                        "jean@jennings.net"});
            table10.AddRow(new string[] {
                        "OrganizationId",
                        "C59A38A6-9414-433A-8611-181B1F96B7EC"});
            table10.AddRow(new string[] {
                        "StreetAddress",
                        ""});
#line 226
 testRunner.And("a user \'Jean Jennings\' is added with the following custom properties:", ((string)(null)), table10, "And ");
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Value"});
            table11.AddRow(new string[] {
                        "EmailAddress",
                        "norma@jennings.net"});
            table11.AddRow(new string[] {
                        "OrganizationId",
                        "C59A38A6-9414-433A-8611-181B1F96B7EC"});
            table11.AddRow(new string[] {
                        "StreetAddress",
                        "Street 123"});
#line 231
 testRunner.And("a user \'Norma Jennings\' is added with the following custom properties:", ((string)(null)), table11, "And ");
#line 236
 testRunner.When("users are searched by custom property name \'StreetAddress\' and value \'Street 123\'" +
                    "", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "EmailAddress",
                        "OrganizationId",
                        "StreetAddress"});
            table12.AddRow(new string[] {
                        "Hank Jennings",
                        "hank@jennings.net",
                        "DB42B633-DE5C-4414-A20F-D57AAED283C1",
                        "Street 123"});
            table12.AddRow(new string[] {
                        "Norma Jennings",
                        "norma@jennings.net",
                        "C59A38A6-9414-433A-8611-181B1F96B7EC",
                        "Street 123"});
#line 237
    testRunner.Then("the following users having custom properties are returned:", ((string)(null)), table12, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Getting users by custom property and account type")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Users")]
        public virtual void GettingUsersByCustomPropertyAndAccountType()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Getting users by custom property and account type", ((string[])(null)));
#line 242
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Value"});
            table13.AddRow(new string[] {
                        "EmailAddress",
                        "hank@jennings.net"});
            table13.AddRow(new string[] {
                        "OrganizationId",
                        "C59A38A6-9414-433A-8611-181B1F96B7EC"});
            table13.AddRow(new string[] {
                        "StreetAddress",
                        "Street 123"});
#line 243
    testRunner.Given("a user \'Hank Jennings\' is added with the following custom properties:", ((string)(null)), table13, "Given ");
#line 248
 testRunner.And("an active directory account with name \'jennihan\' is added for user \'Hank Jennings" +
                    "\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Value"});
            table14.AddRow(new string[] {
                        "EmailAddress",
                        "jean@jennings.net"});
            table14.AddRow(new string[] {
                        "OrganizationId",
                        "C59A38A6-9414-433A-8611-181B1F96B7EC"});
            table14.AddRow(new string[] {
                        "StreetAddress",
                        "Street 321"});
#line 249
 testRunner.And("a user \'Jean Jennings\' is added with the following custom properties:", ((string)(null)), table14, "And ");
#line 254
 testRunner.And("an active directory account with name \'jennijea\' is added for user \'Jean Jennings" +
                    "\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Value"});
            table15.AddRow(new string[] {
                        "EmailAddress",
                        "norma@jennings.net"});
            table15.AddRow(new string[] {
                        "OrganizationId",
                        "C59A38A6-9414-433A-8611-181B1F96B7EC"});
            table15.AddRow(new string[] {
                        "StreetAddress",
                        "Street 123"});
#line 255
 testRunner.And("a user \'Norma Jennings\' is added with the following custom properties:", ((string)(null)), table15, "And ");
#line 260
 testRunner.When("active directory users are searched by custom property name \'StreetAddress\' and v" +
                    "alue \'Street 123\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table16 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "EmailAddress",
                        "OrganizationId",
                        "StreetAddress"});
            table16.AddRow(new string[] {
                        "Hank Jennings",
                        "hank@jennings.net",
                        "C59A38A6-9414-433A-8611-181B1F96B7EC",
                        "Street 123"});
#line 261
    testRunner.Then("the following users having custom properties are returned:", ((string)(null)), table16, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
